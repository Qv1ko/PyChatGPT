import openai,typer
from rich import print
from rich.table import Table

def main():

    #ChatGPT API key
    openai.api_key="tu_api_key"

    print("ðŸ¤– [bold green]ChatGPT API en Python[/bold green]")

    #Tabla de guÃ­a de comandos
    table=Table("Comando","DescripciÃ³n")
    table.add_row("exit","Salir de la aplicaciÃ³n")
    table.add_row("new","Crear una nueva conversaciÃ³n")
    print(table)

    #Contexto del asistente
    context={"role":"system","content":"Eres un asistente muy Ãºtil."}
    messages=[context]

    while True:

        content=__prompt()

        #Condicional de nueva conversaciÃ³n
        if content=="new":
            print("\nðŸ†• [blue]Nueva conversaciÃ³n iniciada[/blue]")
            messages=[context]
            content=__prompt()

        #Respuesta de ChatGPT
        messages.append({"role":"user","content":content})
        response=openai.ChatCompletion().create(model="gpt-3.5-turbo",messages=messages)
        response_content=response.choices[0].message.content
        messages.append({"role":"assistant","content":response_content})

        print(f"\n[bold green]> [/bold green][green]{response_content}[green]")

def __prompt() -> str:

    prompt=typer.prompt("\nðŸ‘± Mensaje ")

    #Condicional de salida
    if prompt=="exit":
        exit=typer.confirm("\nâš  Â¿Estas seguro?")
        if exit:
            print("\nðŸ‘‹ Saliendo...")
            raise typer.Abort()
        return __prompt()

    return prompt

if __name__=="__main__":
    typer.run(main)